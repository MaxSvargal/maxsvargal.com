// Generated by CoffeeScript 1.6.2
var Dependency, pathRelative, upath, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('lodash');

_.mixin((require('underscore.string')).exports());

upath = require('./paths/upath');

pathRelative = require('./paths/pathRelative');

Dependency = (function() {
  var _this = this;

  Function.prototype.property = function(p) {
    var d, n, _results;

    _results = [];
    for (n in p) {
      d = p[n];
      _results.push(Object.defineProperty(this.prototype, n, d));
    }
    return _results;
  };

  Function.prototype.staticProperty = function(p) {
    var d, n, _results;

    _results = [];
    for (n in p) {
      d = p[n];
      _results.push(Object.defineProperty(Dependency.prototype, n, d));
    }
    return _results;
  };

  function Dependency() {
    this._constructor.apply(this, arguments);
  }

  /*
    @param {String} dep The dependency name, i.e 'uberscore' or '../mylibs/dep'
    @param {String} inModuleName The module name that has this dependency (optional).
                    Used to calculate relative paths.
    @param {Array<String>} The files in the bundle (bundleRelative).
                           Used to calculate whether 'myDep' isFound, isGlobal etc.
  */


  Dependency.prototype._constructor = function(dep, inModuleName, bundleFiles) {
    var indexOfSep;

    this.dep = dep;
    this.inModuleName = inModuleName != null ? inModuleName : '';
    this.bundleFiles = bundleFiles != null ? bundleFiles : [];
    this.dep = this.dep.replace(/\\/g, '/');
    indexOfSep = this.dep.indexOf('!');
    if (indexOfSep > 0) {
      this.pluginName = this.dep.slice(0, +(indexOfSep - 1) + 1 || 9e9);
    }
    this.resourceName = indexOfSep >= 0 ? this.dep.slice(indexOfSep + 1, +(this.dep.length - 1) + 1 || 9e9) : this.dep;
    if (upath.extname(this.resourceName)) {
      this.extname = upath.extname(this.resourceName);
      return this.resourceName = upath.trimExt(this.resourceName);
    }
  };

  Dependency.TYPES = {
    notFoundInBundle: 'notFoundInBundle',
    global: 'global',
    external: 'external',
    webRootMap: 'webRootMap',
    bundle: 'bundle'
  };

  Dependency.property({
    type: {
      get: function() {
        if (this.isGlobal()) {
          return Dependency.TYPES.global;
        } else {
          if (this.isExternal()) {
            return Dependency.TYPES.external;
          } else {
            if (this.isNotFoundInBundle()) {
              return Dependency.TYPES.notFoundInBundle;
            } else {
              if (this.isWebRootMap()) {
                return Dependency.TYPES.webRootMap;
              } else {
                return Dependency.TYPES.bundle;
              }
            }
          }
        }
      }
    }
  });

  Dependency.prototype.name = function(options) {
    var _ref, _ref1, _ref2;

    if (options == null) {
      options = {};
    }
    if ((_ref = options.ext) == null) {
      options.ext = this.isExternal() || this.isNotFoundInBundle() ? true : false;
    }
    if ((_ref1 = options.plugin) == null) {
      options.plugin = true;
    }
    if ((_ref2 = options.relativeType) == null) {
      options.relativeType = 'file';
    }
    return "" + (options.plugin && this.pluginName ? this.pluginName + '!' : '') + (options.relativeType === 'bundle' ? this._bundleRelative() : this._fileRelative()) + (options.ext === false || !this.extname ? '' : this.extname);
  };

  Dependency.prototype.toString = function() {
    return this.name();
  };

  /*
  Compare this Dependency instance with another, either Dependency or a string representation of another type.
  It caters for different representations of
    * bundleRelative / fileRelative
    * having `.js` extension or not
  
  @param dep {Dependency | String | .toString} The depedency to compare with this - returns true if
  */


  Dependency.prototype.isEqual = function(dep) {
    var isSameJSFile;

    isSameJSFile = function(a, b) {
      return upath.defaultExt(a, '.js') === upath.defaultExt(b, '.js');
    };
    if (_.isFunction(dep.isBundleBoundary && _.isFunction(dep.name))) {
      return isSameJSFile(dep.name(), this.name());
    } else {
      if (!_.isString(dep)) {
        dep = dep.toString();
      }
    }
    return isSameJSFile(dep, this.name()) || isSameJSFile(dep, this.name({
      relativeType: 'bundle'
    }));
  };

  Dependency.prototype._bundleRelative = function() {
    if (this.isFileRelative() && this.isBundleBoundary()) {
      return upath.normalize("" + (upath.dirname(this.inModuleName)) + "/" + this.resourceName);
    } else {
      return this.resourceName;
    }
  };

  Dependency.prototype._fileRelative = function() {
    if (this.inModuleName && this.isFound()) {
      return pathRelative("$/" + (upath.dirname(this.inModuleName)), "$/" + (this._bundleRelative()), {
        dot4Current: true
      });
    } else {
      return this.resourceName;
    }
  };

  Dependency.prototype.isBundleBoundary = function() {
    if (this.isWebRootMap() || (!this.inModuleName)) {
      return false;
    } else {
      return !!pathRelative("$/" + this.inModuleName + "/../../" + this.resourceName, "$");
    }
  };

  Dependency.prototype.isFileRelative = function() {
    return this.resourceName[0] === '.';
  };

  Dependency.prototype.isRelative = function() {
    return this.resourceName.indexOf('/') >= 0 && !this.isWebRootMap();
  };

  Dependency.prototype.isWebRootMap = function() {
    return this.resourceName[0] === '/';
  };

  Dependency.prototype.isGlobal = function() {
    return !this.isWebRootMap() && !this.isRelative() && !this.isFound();
  };

  /* external-looking deps, like '../../../some/external/lib'
  */


  Dependency.prototype.isExternal = function() {
    return !(this.isBundleBoundary() || this.isWebRootMap());
  };

  /* seem to belong to bundle, but not found, like '../myLib'
  */


  Dependency.prototype.isNotFoundInBundle = function() {
    return this.isBundleBoundary() && !(this.isFound() || this.isGlobal());
  };

  Dependency.prototype.isFound = function() {
    var ke, knownExtensions, _i, _len, _ref;

    knownExtensions = ['.js', '.coffee'];
    for (_i = 0, _len = knownExtensions.length; _i < _len; _i++) {
      ke = knownExtensions[_i];
      if (_ref = this._bundleRelative() + ke, __indexOf.call(this.bundleFiles, _ref) >= 0) {
        return true;
      }
    }
    return false;
  };

  return Dependency;

}).call(this);

module.exports = Dependency;
