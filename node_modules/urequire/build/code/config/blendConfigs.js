// Generated by CoffeeScript 1.6.2
var arrayizeUniquePusher, blendConfigs, bundleBlender, deepCloneBlender, dependenciesBindingsBlender, l, moveKeysBlender, templateBlender, uRequireConfigMasterDefaults, _, _B, _blendDerivedConfigs, _fs,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('lodash');

_fs = require('fs');

_B = require('uberscore');

require('butter-require')();

l = new _B.Logger('urequire/blendConfigs');

uRequireConfigMasterDefaults = require('./uRequireConfigMasterDefaults');

/* Define the various Blenders used
*/


moveKeysBlender = new _B.DeepCloneBlender([
  {
    order: ['path'],
    '*': {
      '|': (function(partsKeys) {
        return function(prop, src, dst, bl) {
          var confPart, _i, _len, _ref;

          _ref = ['bundle', 'build'];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            confPart = _ref[_i];
            if (__indexOf.call(partsKeys[confPart], prop) >= 0) {
              _B.setValueAtPath(bl.dstRoot, "/" + confPart + "/" + prop, src[prop], true);
              break;
            }
          }
          return _B.Blender.SKIP;
        };
      })({
        bundle: _.keys(uRequireConfigMasterDefaults.bundle),
        build: _.keys(uRequireConfigMasterDefaults.build)
      })
    },
    bundle: {
      '|': function() {
        return _B.Blender.NEXT;
      }
    },
    build: {
      '|': function() {
        return _B.Blender.NEXT;
      }
    }
  }
]);

bundleBlender = new _B.DeepCloneBlender([
  {
    order: ['path', 'src'],
    'bundle:dependencies': {
      noWeb: {
        '|': {
          '*': function(prop, src, dst) {
            return arrayizeUniquePusher.blend(dst[prop], src[prop]);
          }
        }
      },
      bundleExports: {
        '|': {
          '*': function(prop, src, dst) {
            return dependenciesBindingsBlender.blend(dst[prop], src[prop]);
          }
        }
      },
      variableNames: {
        '|': {
          '*': function(prop, src, dst) {
            return dependenciesBindingsBlender.blend(dst[prop], src[prop]);
          }
        }
      },
      _knownVariableNames: {
        '|': {
          '*': function(prop, src, dst) {
            return dependenciesBindingsBlender.blend(dst[prop], src[prop]);
          }
        }
      }
    },
    build: {
      template: {
        '|': {
          '*': function(prop, src, dst) {
            return templateBlender.blend(dst[prop], src[prop]);
          }
        }
      }
    }
  }
]);

/*
*dependenciesBindingsBlender*

Converts String, Array<String> or Object {variable:bindingsArrayOfStringsOrString
to the 'proper' dependenciesBinding structure ({dependency1:ArrayOfDep1Bindings, dependency2:ArrayOfDep2Bindings, ...}

So with    *source*                 is converted to proper      *destination*
* String : `'lodash'`                       --->                `{lodash:[]}`

* Array<String>: `['lodash', 'jquery']`     --->            `{lodash:[], jquery:[]}`

* Object: `{lodash:['_'], jquery: '$'}`     --->          as is @todo: convert '$' to proper ['$'], i.e `{lodash:['_'], jquery: ['$']}`

The resulting array of bindings for each 'variable' is blended via arrayizeUniquePusher
to the existing? corresponding array on the destination
*/


dependenciesBindingsBlender = new _B.DeepCloneBlender([
  {
    order: ['src'],
    'String': function(prop, src, dst) {
      return arrayizeUniquePusher.blend(dst[prop], _B.okv({}, src[prop], []));
    },
    'Array': function(prop, src, dst) {
      var varBindings;

      varBindings = {};
      _B.go(src[prop], {
        grab: function(v) {
          return varBindings[v] || (varBindings[v] = []);
        }
      });
      return arrayizeUniquePusher.blend(dst[prop], varBindings);
    },
    'Object': function(prop, src, dst) {
      return arrayizeUniquePusher.blend(dst[prop], src[prop]);
    }
  }
]);

deepCloneBlender = new _B.DeepCloneBlender;

templateBlender = new _B.DeepCloneBlender([
  {
    order: ['src'],
    'String': function(prop, src, dst) {
      var _ref;

      if (src[prop] !== ((_ref = dst[prop]) != null ? _ref.name : void 0)) {
        dst[prop] = {};
      }
      return deepCloneBlender.blend(dst[prop], {
        name: src[prop]
      });
    },
    'Object': 'templateSetter',
    templateSetter: function(prop, src, dst) {
      var _ref;

      if (src[prop].name !== ((_ref = dst[prop]) != null ? _ref.name : void 0) && !_.isUndefined(src[prop].name)) {
        dst[prop] = {};
      }
      return deepCloneBlender.blend(dst[prop], src[prop]);
    }
  }
]);

arrayizeUniquePusher = new _B.DeepCloneBlender([
  {
    order: ['src'],
    unique: true,
    'Array': 'pushToArray',
    'String': 'pushToArray',
    'Number': 'pushToArray',
    'Undefined': 'pushToArray',
    pushToArray: function(prop, src, dst, bl) {
      var itemsToPush, srcArray, v, _i, _len;

      dst[prop] = _B.arrayize(dst[prop]);
      srcArray = _B.arrayize(src[prop]);
      if (_.isEqual(srcArray[0], [null])) {
        dst[prop] = [];
        srcArray = srcArray.slice(1);
      }
      itemsToPush = bl.currentBlenderBehavior.unique ? (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = srcArray.length; _i < _len; _i++) {
          v = srcArray[_i];
          if (__indexOf.call(dst[prop], v) < 0) {
            _results.push(v);
          }
        }
        return _results;
      })() : srcArray;
      for (_i = 0, _len = itemsToPush.length; _i < _len; _i++) {
        v = itemsToPush[_i];
        dst[prop].push(v);
      }
      return dst[prop];
    }
  }
]);

blendConfigs = function(configsArray, deriveLoader) {
  var finalCfg;

  finalCfg = {};
  deriveLoader = _.isFunction(deriveLoader) ? deriveLoader : function(derive) {
    var cfgObject;

    if (_.isString(derive)) {
      l.verbose("Loading config file: '" + derive + "'");
      if (cfgObject = require(_fs.realpathSync(derive))) {
        return cfgObject;
      }
    } else {
      if (_.isObject(derive)) {
        return derive;
      }
    }
    return l.err("Error loading configuration files:\n  derive ", derive, " is a not a valid filename\nwhile processing derive array ['" + (derive.join("', '")) + "']\"");
  };
  _blendDerivedConfigs(finalCfg, configsArray, deriveLoader);
  return finalCfg;
};

_blendDerivedConfigs = function(cfgFinal, cfgsArray, deriveLoader) {
  var cfg, derivedObjects, drv, _i;

  for (_i = cfgsArray.length - 1; _i >= 0; _i += -1) {
    cfg = cfgsArray[_i];
    if (!(cfg)) {
      continue;
    }
    derivedObjects = (function() {
      var _j, _len, _ref, _results;

      _ref = _B.arrayize(cfg.derive);
      _results = [];
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        drv = _ref[_j];
        if (drv) {
          _results.push(deriveLoader(drv));
        }
      }
      return _results;
    })();
    if (!_.isEmpty(derivedObjects)) {
      _blendDerivedConfigs(cfgFinal, derivedObjects, deriveLoader);
    }
    bundleBlender.blend(cfgFinal, moveKeysBlender.blend(cfg));
  }
  return null;
};

module.exports = blendConfigs;

_.extend(blendConfigs, {
  moveKeysBlender: moveKeysBlender,
  templateBlender: templateBlender,
  arrayizeUniquePusher: arrayizeUniquePusher,
  dependenciesBindingsBlender: dependenciesBindingsBlender,
  bundleBlender: bundleBlender
});
