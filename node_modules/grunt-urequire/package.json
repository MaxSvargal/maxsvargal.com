{
  "name": "grunt-urequire",
  "version": "0.4.2",
  "description": "A Grunt wrapper around uRequire <https://github.com/anodynos/uRequire>",
  "main": "tasks/urequire.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/aearly/grunt-urequire"
  },
  "keywords": [
    "gruntplugin",
    "grunt",
    "urequire",
    "modules",
    "module",
    "modular",
    "format",
    "convert",
    "converter",
    "conversion",
    "commonjs",
    "AMD",
    "UMD",
    "UMDjs",
    "requirejs",
    "require",
    "define",
    "umdify",
    "nodefy",
    "browserify",
    "dependency",
    "dependencies",
    "bundle",
    "package"
  ],
  "author": {
    "name": "Alexander Early",
    "email": "alexander.early@gmail.com"
  },
  "contributors": [
    {
      "name": "Agelos Pikoulas",
      "email": "Agelos.Pikoulas@gmail.com"
    }
  ],
  "license": "BSD",
  "devDependencies": {
    "grunt-contrib-coffee": "~0.7.0",
    "grunt": "~0.4.1",
    "mocha": "~1.7.2",
    "underscore": "*",
    "expect.js": "~0.2.0",
    "grunt-simple-mocha": "~0.4.0"
  },
  "dependencies": {
    "urequire": "0.3.0beta1"
  },
  "readme": "grunt-urequire\n==============\n\nGrunt wrapper for [uRequire](https://github.com/anodynos/uRequire), version >= 0.3.0beta1\n\nExample config (using the new uRequire > v0.3.0beta1 format) :\n```javascript\n    urequire:{\n      myLibAsUMD: {\n        template: \"UMD\", // default, can be ommited\n        bundlePath: \"lib/\",\n        outputPath: \"umdLib\"\n      },\n\n      myLibCombinedToWorkEverywhere: {\n        template:'combined',\n        bundlePath: \"lib/\",\n        main: 'myLibraryMain-Index',\n        outputPath: \"combinedLib.js\"\n      },\n\n      _defaults: {\n        debugLevel:90,\n        verbose: true,\n        scanAllow: true,\n        allNodeRequires: true,\n        rootExports: false\n      }\n    }\n```\n\n* Note the new format - version 1.x grunt-urequire format should still be supported, but DEPRECATED.*\n\nA more involved example (in coffeescript), taken from [uBerscore](http://github.com/anodynos/uBerscore).\n\n```coffeescript\n    urequire:\n      # These are the defaults, when a task has no 'derive' at all. Use derive:[] to skip deriving it.\n      # @note that any urequire task starting with '_' is ignored as a grunt target and only used for `derive`-ing.\n      # @note On `derive`: a) dont use cyclic references. b) file referenced path is ALWAYS relative to the initial path (the path used for 1st file/grunt config), instead of the file referencing the referenced one. Both will be fixed :-)\n      _defaults:\n        bundle:\n          bundlePath: \"/source/code\"\n          ignore: [/^draft/, 'uRequireConfig_UMDBuild.json', 'uRequireConfig.coffee'] # completelly ignore these\n          dependencies:\n            bundleExports: #['lodash', 'agreement/isAgree'] # simple syntax\n              'lodash':\"_\",                               # precise syntax\n              'agreement/isAgree': 'isAgree'\n            noWeb: ['util']\n        build:\n          verbose: false # false is default\n          debugLevel: 0  # 0 is default\n\n      # a simple UMD build\n      uberscoreUMD:\n        #'build': # `build` and `bundle` hashes are not needed - keys are safelly recognised, even if they're not in them.\n        #'derive': ['_defaults'] # not needed - by default it deep uDerives all '_defaults'. To avoid use `derive:[]`.\n          #template: 'UMD' # Not needed - 'UMD' is default\n          outputPath: \"./build/code\"\n\n\n\n      # a 'combined' build, that also works without AMD loaders on Web\n      uberscoreDev:\n        main: 'uberscore' # if 'main' is missing, then main is assumed to be `bundleName`,\n                          # which in turn is assumed to be grunt's @target ('uberscoreDev' in this case).\n                          # Having 'uberscoreDev' as the bundleName/main, but no module by that name (or 'index' or 'main')\n                          # will cause a compilation error. Its better to be precise anyway, in case this config is used outside grunt.\n\n        outputPath: './build/dist/uberscore-dev.js'\n        template: 'combined'\n\n      # A combined build, that is `derive`d from 'uberscoreDev' (& specifically '_defaults')\n      # that uses re.js/uglify2 for minification.\n      uberscoreMin:\n        derive: ['uberscoreDev', '_defaults'] # need to specify we also need '_defaults', in this order.\n        outputPath: './build/dist/uberscore-min.js'\n        optimize: 'uglify2' # doesn't have to be a String. `true` selects 'uglify2' also. It can also be 'uglify'.\n                            # Even more interestingly, u can pass any 'uglify2' keys,\n                            # the r.js way (https://github.com/jrburke/r.js/blob/master/build/example.build.js)\n                            # eg {optimize: uglify2: output: beautify: true}\n\n      # An example on how to reference (`derive`-ing from) external urequire config file(s),\n      # while overriding some of its options.\n      #\n      # @note its not deriving at all from '_defaults', unless its specified.\n      #\n      # Its effectivelly equivalent to issuing\n      #  `$ urequire config source/code/uRequireConfig.coffee -o ./build/code -t UMD`\n      uberscoreFileConfig:\n        derive: ['source/code/uRequireConfig.coffee']\n        template: 'UMD'\n        outputPath: 'build/anotherUMDBuild'\n\n      # uRequire-ing the specs: we also have two build as 'UMD' & as 'combined'\n      spec: # deep inherits all '_defaults', by default :-)\n        bundlePath: \"source/spec\"\n        outputPath: \"build/spec\"\n        dependencies:\n          bundleExports:\n            chai: 'chai'\n            lodash: '_'\n            uberscore: '_B'\n            'spec-data': 'data'\n            # assert = chai.assert # @todo(for uRequire 4 5 5) allow for . notation to refer to export!\n\n      specCombined:\n        derive: ['spec'] # deep inherits all of 'spec' BUT none of '_defaults':-)\n        outputPath: \"build/spec_combined/index-combined.js\"\n        template: 'combined'\n        #main: 'index' # not needed: if `bundle.main` is undefined it defaults\n                       # to `bundle.bundleName` or 'index' or 'main' (whichever found 1st as a module on bundleRoot)\n                       # with the price of a warning! In spec's case, THERE IS a module 'index.coffee' which is picked.\n        dependencies:\n          variableNames:\n            uberscore: ['_B', 'uberscore']\n```\n\nLook for more documentation on [uRequire](https://github.com/anodynos/uRequire)'s docs (WIP)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/aearly/grunt-urequire/issues"
  },
  "_id": "grunt-urequire@0.4.2",
  "_from": "grunt-urequire@"
}
