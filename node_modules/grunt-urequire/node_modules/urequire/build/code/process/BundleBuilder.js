// Generated by CoffeeScript 1.6.2
var BundleBuilder, YADC, blendConfigs, l, uRequireConfigMasterDefaults, upath, _, _B, _Bs, _fs,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('lodash');

_fs = require('fs');

_B = require('uberscore');

l = new _B.Logger('urequire/BundleBuilder');

upath = require('../paths/upath');

uRequireConfigMasterDefaults = require('../config/uRequireConfigMasterDefaults');

blendConfigs = require('../config/blendConfigs');

_Bs = require('../utils/uBerscoreShortcuts');

/*
  Load config :
    * check options
    * Load (a) bundle(s) and (a) build(s)
    * Build & watch for changes
*/


BundleBuilder = (function() {
  function BundleBuilder(configs, deriveLoader) {
    var finalCfg, _ref;

    this.configs = configs;
    configs.push(uRequireConfigMasterDefaults);
    finalCfg = blendConfigs(configs, deriveLoader);
    this.bundleCfg = finalCfg.bundle;
    this.buildCfg = finalCfg.build;
    this.buildCfg.done = ((_ref = configs[0]) != null ? _ref.done : void 0) || function() {
      return l.log('where s my done1?');
    };
    if (this.buildCfg.debugLevel != null) {
      _B.Logger.setDebugLevel(this.buildCfg.debugLevel, 'urequire');
      l.debug(0, "Setting userCfg _B.Logger.setDebugLevel(" + this.buildCfg.debugLevel + ", 'urequire')");
    }
    if (!this.buildCfg.verbose) {
      if (this.buildCfg.debugLevel >= 50) {
        l.warn('Enabling verbose, because debugLevel >= 50');
      } else {
        _B.Logger.prototype.verbose = function() {};
      }
    }
    if (l.deb(40)) {
      l.debug(40, "user config :\n", blendConfigs(configs.slice(0, +(configs.length - 2) + 1 || 9e9), deriveLoader));
    }
    if (l.deb(20)) {
      l.debug("final config :\n", finalCfg);
    }
    /* Lets check & fix different formats or quit if we have anomalies
    */

    this.Bundle = require('./Bundle');
    this.Build = require('./Build');
    if (this.isCheckAndFixPaths() && this.isCheckTemplate()) {
      this.bundle = new this.Bundle(this.bundleCfg);
      this.build = new this.Build(this.buildCfg);
    } else {
      l.debug(0, "Something went wrong - final cfg :\n", finalCfg);
      this.buildCfg.done(false);
    }
  }

  BundleBuilder.prototype.buildBundle = function() {
    if (!(!this.build || !this.bundle)) {
      return this.bundle.buildChangedModules(this.build);
    } else {
      l.err("buildBundle(): I have !@build or !@bundle - can't build!");
      return this.buildCfg.done(false);
    }
  };

  BundleBuilder.prototype.isCheckTemplate = function() {
    var _ref;

    if (_ref = this.buildCfg.template.name, __indexOf.call(this.Build.templates, _ref) < 0) {
      l.err("Quitting build, invalid template '" + this.buildCfg.template.name + "' specified.\nUse -h for help");
      return false;
    }
    return true;
  };

  BundleBuilder.prototype.isCheckAndFixPaths = function() {
    var cfgFile, dirName, _ref, _ref1, _ref2;

    if (((_ref = this.bundleCfg) != null ? _ref.bundlePath : void 0) == null) {
      if (cfgFile = (_ref1 = this.configs[0]) != null ? (_ref2 = _ref1.derive) != null ? _ref2[0] : void 0 : void 0) {
        if (dirName = upath.dirname(cfgFile)) {
          l.warn("Assuming bundlePath = '" + dirName + "' from 1st configFile: '" + cfgFile + "'");
          this.bundleCfg.bundlePath = dirName;
          return true;
        } else {
          l.err("Assuming bundlePath = '" + (upath.dirname(cfgFile)) + "' from 1st configFile: '" + cfgFile + "'");
          return false;
        }
      } else {
        l.err("Quitting build, no bundlePath specified.\nUse -h for help");
        return false;
      }
    } else {
      if (this.buildCfg.forceOverwriteSources) {
        this.buildCfg.outputPath = this.bundleCfg.bundlePath;
        l.verbose("Forced output to '" + this.buildCfg.outputPath + "'");
        return true;
      } else {
        if (!this.buildCfg.outputPath) {
          l.err("Quitting build, no --outputPath specified.\nUse -f *with caution* to overwrite sources.");
          return false;
        } else {
          if (this.buildCfg.outputPath === this.bundleCfg.bundlePath) {
            l.err("Quitting build, outputPath === bundlePath.\nUse -f *with caution* to overwrite sources (no need to specify --outputPath).");
            return false;
          }
        }
      }
    }
    return true;
  };

  return BundleBuilder;

})();

module.exports = BundleBuilder;

/* Debug information
*/


if (l.deb > 10 || true) {
  YADC = require('YouAreDaChef').YouAreDaChef;
  YADC(BundleBuilder).before(/_constructor/, function(match, config) {
    return l.debug(1, "Before '" + match + "' with config = ", config);
  });
}
