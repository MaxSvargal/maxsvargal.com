// Combined file generated by uRequire v0.3.0beta1, with help from r.js & almond
(function (){
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;


  var __global = null,
      __nodeRequire = function(){};

  if (__isNode) {
      __nodeRequire = require;
      __global = global;
  } else {
      __global = window;
  };

  factory = function() {
/**
 * almond 0.2.5 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        if (config.deps) {
            req(config.deps, config.callback);
        }
        return req;
    };

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("almond", function(){});

(function (window) {
  define('classes/bg_animation',['require','exports','module'],
  function (require, exports, module) {
  // uRequire: start body of original nodejs module
var moveNarrows;

moveNarrows = function() {
    var el_back, el_middle, move, pos;
    function moveNarrows() {}
    el_back = document.getElementById("narrows_back");
    el_middle = document.getElementById("narrows_middle");
    pos = 0;
    move = function() {
        el_back.style.backgroundPositionY = "-" + pos + "px";
        el_middle.style.backgroundPositionY = "-" + pos * 2 + "px";
        return pos++;
    };
    window.setInterval(move, 70);
    return moveNarrows;
}();

module.exports = moveNarrows;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('classes/portfolio_canvas',['require','exports','module'],
  function (require, exports, module) {
  // uRequire: start body of original nodejs module


var portfolioCanvas;

portfolioCanvas = function() {
    function portfolioCanvas(projects) {
        this.projects = projects;
        if (typeof this.projects !== "object") {
            throw Error("You should pass input data of projects");
        }
        this.drawObj = {};
        this.item_height = 400;
        this.createDom();
        this.initScrollController();
    }
    portfolioCanvas.prototype.createDom = function() {
        var canvas, container, data, doc_width, frag, link, name, _ref;
        container = document.getElementById("portfolio");
        frag = document.createDocumentFragment();
        doc_width = document.body.clientWidth;
        _ref = this.projects;
        for (name in _ref) {
            data = _ref[name];
            link = document.createElement("a");
            link.className = "prtf_link";
            link.setAttribute("href", "/#!/project/" + name);
            canvas = document.createElement("canvas");
            canvas.id = "prtf_" + name;
            canvas.width = doc_width;
            canvas.height = this.item_height;
            link.appendChild(canvas);
            frag.appendChild(link);
        }
        return container.appendChild(frag);
    };
    portfolioCanvas.prototype.makeImage = function(name) {
        var img, _this = this;
        img = new Image;
        img.onload = function(nr) {
            return function() {
                return _this.drawObj[name].draw(1);
            };
        }(name);
        img.src = "/images/portfolio/" + name + "/banner.jpg";
        return img;
    };
    portfolioCanvas.prototype.drawCanvas = function(src, img, offset) {
        var context, grd, width_offset;
        src.height = this.item_height;
        context = src.getContext("2d");
        context.fillStyle = "black";
        context.fillRect(0, 0, src.width, this.item_height);
        if (window.outerWidth <= img.width) {
            width_offset = -(img.width / 2 - window.outerWidth / 2);
        } else {
            width_offset = window.outerWidth / 2 - img.width / 2;
        }
        context.scale(1, offset);
        context.drawImage(img, width_offset, 0);
        grd = context.createLinearGradient(0, 0, 0, this.item_height);
        grd.addColorStop(0, "rgba(255, 253, 241, " + (.5 - offset) + ")");
        grd.addColorStop(.5, "rgba(255, 253, 241, " + (1 - offset) + ")");
        grd.addColorStop(.5, "rgba(0, 0, 0, " + (1 - offset) + ")");
        grd.addColorStop(1, "rgba(0, 0, 0, " + (.7 - offset) + ")");
        context.fillStyle = grd;
        return context.fillRect(0, 0, src.width, this.item_height);
    };
    portfolioCanvas.prototype.reDraw = function() {
        var data, name, _ref, _results;
        this.scrollController();
        _ref = this.drawObj;
        _results = [];
        for (name in _ref) {
            data = _ref[name];
            data.src.width = window.outerWidth;
            data.src.height = this.item_height;
            _results.push(data.draw(1));
        }
        return _results;
    };
    portfolioCanvas.prototype.initScrollController = function() {
        var canvas, data, from_above, i, img, name, start, _ref, _results;
        from_above = document.getElementById("container");
        this.start_point = from_above.scrollHeight - window.innerHeight;
        i = 0;
        _ref = this.projects;
        _results = [];
        for (name in _ref) {
            data = _ref[name];
            canvas = document.getElementById("prtf_" + name);
            img = this.makeImage(name);
            start = this.start_point + this.item_height * i++;
            _results.push(this.drawObj[name] = {
                src: canvas,
                img: img,
                start: start,
                end: start + this.item_height,
                draw: this.drawCanvas.bind(this, canvas, img)
            });
        }
        return _results;
    };
    portfolioCanvas.prototype.scrollController = function() {
        var data, name, offset, p_offset, _ref, _results;
        p_offset = window.pageYOffset || document.body.scrollTop;
        if (p_offset >= this.start_point) {
            _ref = this.drawObj;
            _results = [];
            for (name in _ref) {
                data = _ref[name];
                if (p_offset >= data.start && p_offset <= data.end) {
                    offset = (p_offset - data.start) / this.item_height;
                    data.draw(offset.toFixed(3));
                }
                if (p_offset > data.end && p_offset < data.end + 50) {
                    _results.push(data.draw(1));
                } else {
                    _results.push(void 0);
                }
            }
            return _results;
        }
    };
    return portfolioCanvas;
}();

module.exports = portfolioCanvas;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('classes/portfolio_overlay',['require','exports','module'],
  function (require, exports, module) {
  // uRequire: start body of original nodejs module


var portfolioOverlay, __bind = function(fn, me) {
    return function() {
        return fn.apply(me, arguments);
    };
};

portfolioOverlay = function() {
    function portfolioOverlay(projects) {
        this.projects = projects;
        this.popState = __bind(this.popState, this);
        this.route = __bind(this.route, this);
        this.container = document.getElementById("portfolio_overlay");
        window.onload = this.route;
        window.onpopstate = this.popState;
    }
    portfolioOverlay.prototype.createDom = function(name) {
        var canvas, el;
        canvas = document.getElementById("prtf_" + name);
        el = document.createElement("div");
        el.id = "prtf_box_" + name;
        el.className = "prtf_box";
        el.innerHTML = "<h1>" + name + "</h1>";
        return this.container.appendChild(el);
    };
    portfolioOverlay.prototype.route = function(evet) {
        var exp, url_name;
        exp = location.hash.match(/^#\!\/project\/(\w{1,})$/i);
        if (exp && (url_name = exp[1])) {
            this.createDom(name);
            return history.pushState({
                project: name
            }, "", location.hash);
        }
    };
    portfolioOverlay.prototype.popState = function(event) {
        this.route();
        if (event.state) {
            return console.log(event.state);
        } else {
            console.log(location.hash);
            return history.replaceState(this.state, "", location.hash);
        }
    };
    return portfolioOverlay;
}();

module.exports = portfolioOverlay;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('classes/skills_bars',['require','exports','module'],
  function (require, exports, module) {
  // uRequire: start body of original nodejs module


var skillsBars;

skillsBars = function() {
    function skillsBars(config) {
        var group, name, _ref;
        this.config = config;
        this.bar_width = 300;
        _ref = this.config;
        for (name in _ref) {
            group = _ref[name];
            this.createDom(name, group);
        }
    }
    skillsBars.prototype.getAbilityLevel = function(progress) {
        switch (false) {
          case !(progress <= .3):
            return "basic";
          case !(progress <= .6):
            return "intermediate";
          case !(progress <= .8):
            return "advanced";
          case !(progress <= 1):
            return "expert";
          default:
            return "excellent";
        }
    };
    skillsBars.prototype.createDom = function(name, group) {
        var bar, bar_label, bname, box, cgroup, container, data, frag, item, label, _i, _len;
        container = document.getElementById("skills");
        frag = document.createDocumentFragment();
        cgroup = document.createElement("div");
        cgroup.className = "group " + name;
        cgroup.id = "sk_bar_" + name;
        for (bname in group) {
            data = group[bname];
            for (_i = 0, _len = data.length; _i < _len; _i++) {
                item = data[_i];
                box = document.createElement("div");
                box.className = "box";
                label = document.createElement("label");
                label.className = "label";
                label.innerHTML = item.name;
                bar = document.createElement("div");
                bar.className = "bar " + name;
                bar.dataset.width = this.bar_width * item.progress;
                bar_label = document.createElement("span");
                bar_label.innerHTML = this.getAbilityLevel(item.progress);
                bar.appendChild(bar_label);
                box.appendChild(label);
                box.appendChild(bar);
                cgroup.appendChild(box);
            }
        }
        frag.appendChild(cgroup);
        return container.appendChild(frag);
    };
    skillsBars.prototype.animateBars = function(name) {
        var animate, elems, group;
        group = document.getElementById("sk_bar_" + name);
        if (group.style.disabled === true) {
            return;
        }
        group.style.disabled = true;
        elems = group.getElementsByClassName("box");
        animate = function(opts) {
            var delta, start, timer;
            start = new Date;
            delta = opts.delta;
            return timer = setInterval(function() {
                var progress;
                progress = (new Date - start) / opts.duration;
                if (progress > 1) {
                    progress = 1;
                }
                opts.step(opts.delta(progress));
                if (progress === 1) {
                    clearInterval(timer);
                    return opts.complete && opts.complete();
                }
            }, opts.delay || 13);
        };
        return animate({
            delay: 10,
            duration: 1600,
            delta: function(progress) {
                return Math.pow(progress, 4);
            },
            step: function(delta) {
                var el, _i, _len, _results;
                _results = [];
                for (_i = 0, _len = elems.length; _i < _len; _i++) {
                    el = elems[_i];
                    _results.push(function(el) {
                        var bar, label;
                        bar = el.getElementsByClassName("bar");
                        label = el.getElementsByTagName("span");
                        bar[0].style.width = bar[0].dataset.width * delta + "px";
                        return label[0].style.opacity = delta;
                    }(el));
                }
                return _results;
            }
        });
    };
    skillsBars.prototype.scrollController = function() {
        var header, i, name, obj, p_offset, start, _ref, _results;
        header = document.getElementById("header");
        start = header.scrollHeight - window.innerHeight + 220;
        p_offset = window.pageYOffset || document.body.scrollTop;
        i = 0;
        if (p_offset >= start && p_offset <= 1528) {
            _ref = this.config;
            _results = [];
            for (name in _ref) {
                obj = _ref[name];
                if (p_offset >= start + 450 * i) {
                    this.animateBars(name);
                }
                _results.push(i++);
            }
            return _results;
        }
    };
    return skillsBars;
}();

module.exports = skillsBars;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('config/portfolio_canvas_config',['require','exports','module'],
  function (require, exports, module) {
  // uRequire: start body of original nodejs module
module.exports = {
    vahtang: {
        bg: "#000",
        images: [ "01.jpg", "02.jpg" ]
    },
    "4sound": {
        bg: "#000",
        images: [ "01.jpg", "02.jpg" ]
    },
    imaginarium: {
        bg: "#000",
        images: [ "01.jpg", "02.jpg" ]
    },
    hightway: {
        bg: "#000",
        images: [ "01.jpg", "02.jpg" ]
    },
    maplestory: {
        bg: "#000",
        images: [ "01.jpg", "02.jpg" ]
    },
    alenushka: {
        bg: "#000",
        images: [ "01.jpg", "02.jpg" ]
    }
};
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('config/skills_bars_config',['require','exports','module'],
  function (require, exports, module) {
  // uRequire: start body of original nodejs module
module.exports = {
    design: {
        settings: {
            text: "Hello, design!"
        },
        data: [ {
            name: "web-design",
            progress: .9
        }, {
            name: "typography",
            progress: .6
        }, {
            name: "illustrations",
            progress: .3
        }, {
            name: "usability",
            progress: 1
        } ]
    },
    coding: {
        settings: {
            text: "Hello, coding!"
        },
        data: [ {
            name: "html (jade, haml)",
            progress: 1
        }, {
            name: "css (sass)",
            progress: .9
        }, {
            name: "javascript",
            progress: .75
        }, {
            name: "jquery",
            progress: 1
        }, {
            name: "coffeescript",
            progress: .61
        } ]
    },
    programming: {
        data: [ {
            name: "node.js",
            progress: .65
        }, {
            name: "ruby on rails",
            progress: .41
        }, {
            name: "php (yii, kohana)",
            progress: .9
        }, {
            name: "phyton",
            progress: .2
        }, {
            name: "sql (mysql, postgress)",
            progress: .7
        }, {
            name: "nosql (mongodb)",
            progress: .3
        } ]
    },
    another: {
        data: [ {
            name: "tdd (bdd)",
            progress: .3
        }, {
            name: "git",
            progress: .75
        }, {
            name: "linux",
            progress: .65
        }, {
            name: "os x",
            progress: .5
        } ]
    }
};
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('main',['require', 'exports', 'module', './classes/bg_animation', './classes/portfolio_canvas', './classes/portfolio_overlay', './classes/skills_bars', './config/portfolio_canvas_config', './config/skills_bars_config'], 
  function (require, exports, module) {
  // uRequire: start body of original nodejs module


var initialization, moveNarrows, portfolioCanvas, portfolioOverlay, portfolio_config, skillsBars, skills_config;

moveNarrows = require("./classes/bg_animation");

portfolioCanvas = require("./classes/portfolio_canvas");

portfolioOverlay = require("./classes/portfolio_overlay");

skillsBars = require("./classes/skills_bars");

portfolio_config = require("./config/portfolio_canvas_config");

skills_config = require("./config/skills_bars_config");

initialization = function() {
    var bg_anim, overlay, portfolio, skills;
    bg_anim = new moveNarrows;
    skills = new skillsBars(skills_config);
    portfolio = new portfolioCanvas(portfolio_config);
    overlay = new portfolioOverlay(portfolio_config);
    window.onscroll = function() {
        portfolio.scrollController();
        return skills.scrollController();
    };
    return window.onresize = function() {
        return portfolio.reDraw();
    };
}();
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);

      return require('main');
  };

  if (__isAMD) {
      define([], factory);
  } else {
      if (__isNode) {
          module.exports = factory();
      } else {
          factory();
      }
  }
})();