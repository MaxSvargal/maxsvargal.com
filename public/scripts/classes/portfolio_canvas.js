// Generated by uRequire v0.3.0beta1
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('classes/portfolio_canvas', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module);
 } else if (typeof define === 'function' && define.amd) {
     define(factory);
 }
})(this,function (require, exports, module) {
  // uRequire: start body of original nodejs module
"use strict";

var portfolioCanvas;

portfolioCanvas = function() {
    function portfolioCanvas(projects) {
        this.projects = projects;
        if (typeof this.projects === "undefined" || this.projects !== "array") {
            "You should pass input data of projects";
        }
        this.drawObj = {};
        this.item_height = 400;
        this.createDom();
        this.initScrollController();
    }
    portfolioCanvas.prototype.createDom = function() {
        var canvas, container, data, doc_width, frag, link, name, _ref;
        container = document.getElementById("portfolio");
        frag = document.createDocumentFragment();
        doc_width = document.body.clientWidth;
        _ref = this.projects;
        for (name in _ref) {
            data = _ref[name];
            link = document.createElement("a");
            link.className = "prtf_link";
            link.setAttribute("href", "/#!/project/" + name);
            canvas = document.createElement("canvas");
            canvas.id = "prtf_" + name;
            canvas.width = doc_width;
            canvas.height = this.item_height;
            link.appendChild(canvas);
            frag.appendChild(link);
        }
        return container.appendChild(frag);
    };
    portfolioCanvas.prototype.makeImage = function(name) {
        var img, _this = this;
        img = new Image;
        img.onload = function(nr) {
            return function() {
                return _this.drawObj[name].draw(1);
            };
        }(name);
        img.src = "/images/portfolio/" + name + "/banner.jpg";
        return img;
    };
    portfolioCanvas.prototype.drawCanvas = function(src, img, offset) {
        var context, grd, width_offset;
        src.height = this.item_height;
        context = src.getContext("2d");
        context.fillStyle = "black";
        context.fillRect(0, 0, src.width, this.item_height);
        if (window.outerWidth <= img.width) {
            width_offset = -(img.width / 2 - window.outerWidth / 2);
        } else {
            width_offset = window.outerWidth / 2 - img.width / 2;
        }
        context.scale(1, offset);
        context.drawImage(img, width_offset, 0);
        grd = context.createLinearGradient(0, 0, 0, this.item_height);
        grd.addColorStop(0, "rgba(255, 253, 241, " + (.5 - offset) + ")");
        grd.addColorStop(.5, "rgba(255, 253, 241, " + (1 - offset) + ")");
        grd.addColorStop(.5, "rgba(0, 0, 0, " + (1 - offset) + ")");
        grd.addColorStop(1, "rgba(0, 0, 0, " + (.7 - offset) + ")");
        context.fillStyle = grd;
        return context.fillRect(0, 0, src.width, this.item_height);
    };
    portfolioCanvas.prototype.reDraw = function() {
        var data, name, _ref, _results;
        this.scrollController();
        _ref = this.drawObj;
        _results = [];
        for (name in _ref) {
            data = _ref[name];
            data.src.width = window.outerWidth;
            data.src.height = this.item_height;
            _results.push(data.draw(1));
        }
        return _results;
    };
    portfolioCanvas.prototype.initScrollController = function() {
        var canvas, data, from_above, i, img, name, start, _ref, _results;
        from_above = document.getElementById("container");
        this.start_point = from_above.scrollHeight - window.innerHeight;
        i = 0;
        _ref = this.projects;
        _results = [];
        for (name in _ref) {
            data = _ref[name];
            canvas = document.getElementById("prtf_" + name);
            img = this.makeImage(name);
            start = this.start_point + this.item_height * i++;
            _results.push(this.drawObj[name] = {
                src: canvas,
                img: img,
                start: start,
                end: start + this.item_height,
                draw: this.drawCanvas.bind(this, canvas, img)
            });
        }
        return _results;
    };
    portfolioCanvas.prototype.scrollController = function() {
        var data, name, offset, p_offset, _ref, _results;
        p_offset = window.pageYOffset || document.body.scrollTop;
        if (p_offset >= this.start_point) {
            _ref = this.drawObj;
            _results = [];
            for (name in _ref) {
                data = _ref[name];
                if (p_offset >= data.start && p_offset <= data.end) {
                    offset = (p_offset - data.start) / this.item_height;
                    data.draw(offset.toFixed(3));
                }
                if (p_offset > data.end && p_offset < data.end + 50) {
                    _results.push(data.draw(1));
                } else {
                    _results.push(void 0);
                }
            }
            return _results;
        }
    };
    return portfolioCanvas;
}();

module.exports = portfolioCanvas;
// uRequire: end body of original nodejs module


return module.exports;
})
})();